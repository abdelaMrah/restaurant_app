// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }


// model User {
//   id               Int               @id @default(autoincrement())
//   username         String            @unique
//   email            String            @unique
//   password         String
//   roleId           Int
//   photoUrl         String?
//   role             Role              @relation(fields: [roleId], references: [id])
//   orders           Order[]
//   userPermissions  UserPermission[]
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime?         @updatedAt
// }

// model Role {
//   id            Int               @id @default(autoincrement())
//   name          String
//   description   String
//   users         User[]
//   rolePermissions RolePermission[]
//   createdAt     DateTime          @default(now())
//   updatedAt     DateTime?         @updatedAt
// }

// model Permission {
//   id             Int              @id @default(autoincrement())
//   name           String           @unique
//   description    String
//   rolePermissions RolePermission[]
//   userPermissions UserPermission[]
//   createdAt      DateTime          @default(now())
//   updatedAt      DateTime?         @updatedAt
// }

// model RolePermission {
//   id             Int              @id @default(autoincrement())
//   roleId         Int
//   permissionId   Int
//   role           Role             @relation(fields: [roleId], references: [id])
//   permission     Permission       @relation(fields: [permissionId], references: [id])

//   @@unique([roleId, permissionId])
//   createdAt DateTime @default(now())
//   updatedAt DateTime?
// }

// model UserPermission {
//   id            Int              @id @default(autoincrement())
//   userId        Int
//   permissionId  Int
//   isGranted     Boolean
//   user          User             @relation(fields: [userId], references: [id])
//   permission    Permission       @relation(fields: [permissionId], references: [id])

//   @@unique([userId, permissionId])
//   createdAt DateTime @default(now())
//   updatedAt DateTime?
// }

// model MenuItem {
//   id          Int       @id @default(autoincrement())
//   name        String
//   description String?
//   price       Float
//   category    Category  @relation(fields: [categoryId], references: [id])
//   categoryId  Int
//   orderItem   OrderItem[]
//   replenishmentOrder  ReplenishmentOrder[]
//   inventory    Inventory[]
//   isAvailable Boolean   @default(true)
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
// }

// model Category {
//   id          Int       @id @default(autoincrement())
//   name        String    @unique
//   description String?
//   menuItems   MenuItem[]
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime?
// }

// enum OrderStatus {
//   PENDING
//   CONFIRMED
//   IN_PROGRESS
//   COMPLETED
//   CANCELLED
// }

// model Order {
//   id          Int        @id @default(autoincrement())
//   status      OrderStatus @default(PENDING)
//   user        User       @relation(fields: [userId], references: [id])
//   userId      Int
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
//   orderItems  OrderItem[]
// }

// model OrderItem {
//   id        Int      @id @default(autoincrement())
//   order     Order    @relation(fields: [orderId], references: [id])
//   orderId   Int
//   menuItem  MenuItem @relation(fields: [menuItemId], references: [id])
//   menuItemId Int
//   quantity  Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime?
// }

// model Inventory {
//   id          Int      @id @default(autoincrement())
//   menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
//   menuItemId  Int
//   stockLevel  Int
//   reorderLevel Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime?
// }

// model ReplenishmentOrder {
//   id            Int      @id @default(autoincrement())
//   menuItem      MenuItem @relation(fields: [menuItemId], references: [id])
//   menuItemId    Int
//   quantity      Int
//   orderDate     DateTime @default(now())
//   receivedDate  DateTime?
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime?
// }



////////////////////////



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserStatus {
 Actif
Inactif
}
enum OrderType {
  dine_in
  takeout
  online
}
model User {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  email            String            @unique
  firstname        String
  lastname         String
  password         String
  roleId           Int
  photoUrl         String?
  phone            String?
  startDate        DateTime?          @default(now())
  role             Role               @relation("UserRole", fields: [roleId], references: [id]) 
  status           UserStatus?         @default(Actif)
  orders           Order[]
  userPermissions  UserPermission[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  users           User[]            @relation("UserRole") 
  rolePermissions RolePermission[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
}

model RolePermission {
  id              Int              @id @default(autoincrement())
  roleId          Int
  permissionId    Int
  role            Role             @relation(fields: [roleId], references: [id])
  permission      Permission       @relation(fields: [permissionId], references: [id])
  isGranted       Boolean          @default(false) // Indique si la permission est accordée pour ce rôle

  @@unique([roleId, permissionId]) // Assure l'unicité de la relation
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
}

model UserPermission {
  id              Int              @id @default(autoincrement())
  userId          Int
  permissionId    Int
  isGranted       Boolean          @default(false) // Indique si la permission est accordée à l'utilisateur
  user            User             @relation(fields: [userId], references: [id])
  permission      Permission       @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId]) // Assure l'unicité de la relation
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
}

model Order {
  id          Int        @id @default(autoincrement())
  status      OrderStatus @default(PENDING)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  type        OrderType?  @default(takeout)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  orderItems  OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model MenuItem {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  orderItem   OrderItem[]
  replenishmentOrder  ReplenishmentOrder[]
  inventory    Inventory[]
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  menuItems   MenuItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Inventory {
  id          Int      @id @default(autoincrement())
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId  Int
  stockLevel  Int
  reorderLevel Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
}

model ReplenishmentOrder {
  id            Int      @id @default(autoincrement())
  menuItem      MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId    Int
  quantity      Int
  orderDate     DateTime @default(now())
  receivedDate  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime?
}
