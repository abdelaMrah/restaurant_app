generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum UserStatus {
 Actif
Inactif
}
enum OrderType {
  dine_in
  takeout
  online
}
model User {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  email            String            @unique
  firstname        String
  lastname         String
  password         String
  roleId           Int
  photoUrl         String?
  phone            String?
  startDate        DateTime?         @default(now())
  role             Role               @relation("UserRole", fields: [roleId], references: [id]) 
  status           UserStatus?        @default(Actif)
  orders           Order[]
  userPermissions  UserPermission[]
  employee         Employee?                   
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
}


model Salary {
  id              Int       @id @default(autoincrement())
  employeeId      Int       @unique
  amount          Float    
  paidDate        DateTime? 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  employee        Employee   @relation(fields: [employeeId], references: [id])
}

model Employee {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique 
  salary           Salary?
  advances         Advance[]
  abscence         Absence[]
  attendance       Attendance[]
  cook             Cook?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime?  @updatedAt

  user             User       @relation(fields: [userId], references: [id],onDelete: Cascade)
}
model Advance {
  id              Int       @id @default(autoincrement())
  employeeId      Int
  amount          Float     
  requestDate     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  employee        Employee   @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id         Int      @id @default(autoincrement())
  employeeId     Int
  checkIn    DateTime @default(now())  
  checkOut   DateTime?                     
  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt
  employee       Employee     @relation(fields: [employeeId], references: [id])
}

model Absence {
  id         Int      @id @default(autoincrement())
  employeeId     Int
  date       DateTime 
  reason     String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt
  empoloyee   Employee     @relation(fields: [employeeId], references: [id])
}
model Role {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  users           User[]            @relation("UserRole") 
  rolePermissions RolePermission[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
}

model RolePermission {
  id              Int              @id @default(autoincrement())
  roleId          Int
  permissionId    Int
  role            Role             @relation(fields: [roleId], references: [id])
  permission      Permission       @relation(fields: [permissionId], references: [id])
  isGranted       Boolean          @default(true) 

  @@unique([roleId, permissionId]) 
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
}

model UserPermission {
  id              Int              @id @default(autoincrement())
  userId          Int
  permissionId    Int
  isGranted       Boolean          @default(false) 
  user            User             @relation(fields: [userId], references: [id])
  permission      Permission       @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId]) 
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
}
model WorkDay {
  id          Int      @id @default(autoincrement())
  date        DateTime @unique
  isOpen      Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  inventories Inventory[]
  orders      Order[]
}

model Order {
  id          Int        @id @default(autoincrement())
  status      OrderStatus @default(PENDING)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  type        OrderType?  @default(takeout)
  table       Int?
  phone       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  orderItems  OrderItem[]
  workDayId   Int
  workDay     WorkDay  @relation(fields: [workDayId], references: [id])

}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id] ,onDelete: Cascade)
  
  orderId   Int
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id],onDelete: NoAction)
  menuItemId Int
  orderItemCooks OrderItemCook[] 

  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime?
}
model Ingredient {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  menuItems   MenuItemIngredient[] 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}
model OrderItemCook {
  id          Int         @id @default(autoincrement())
  orderItemId Int
  cookId      Int
  orderItem   OrderItem   @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  cook        Cook        @relation(fields: [cookId], references: [id], onDelete: Cascade)

  @@unique([orderItemId, cookId]) 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Cook {
  id          Int        @id @default(autoincrement())
  employeId      Int        @unique
  specialties String[]  
  employe        Employee       @relation(fields: [employeId], references: [id], onDelete: Cascade)
  orderItemCooks OrderItemCook[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model MenuItemIngredient {
  id          Int       @id @default(autoincrement())
  menuItemId  Int
  ingredientId Int
  quantity    Int 
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  ingredient  Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([menuItemId, ingredientId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  menuItems   MenuItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}


model Inventory {
  id          Int      @id @default(autoincrement())
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId  Int
  stockLevel  Int
  reorderLevel Int  
  workDayId   Int
  workDay     WorkDay  @relation(fields: [workDayId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
}

model MenuItem {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  imageUrl  String?
  price       Float
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  orderItem   OrderItem[]
  replenishmentOrderMenuItem ReplenishmentOrderMenuItem[]
  inventory    Inventory[]
  isAvailable Boolean   @default(true)
  ingredients  MenuItemIngredient[] 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}
model ReplenishmentOrderMenuItem{
  id            Int      @id @default(autoincrement())
  menuItemId Int
  replenishmentOrderId Int
  quantity      Int
  menuItem    MenuItem @relation(fields: [menuItemId],references: [id])
  replenishmentOrder ReplenishmentOrder @relation(fields: [replenishmentOrderId],references: [id])
}
model ReplenishmentOrder {
  id            Int      @id @default(autoincrement())
  menuItemId    Int
  quantity      Int
  replenishmentOrderMenuItem ReplenishmentOrderMenuItem[]
  orderDate     DateTime @default(now())
  receivedDate  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime?
}



model OrdersSummaryByHour {
  hour           Int
  total_orders   Int
  total_menu_items Int
  total_revenue  Float

  @@map("orders_summary_by_hour") 
  @@ignore                        
}